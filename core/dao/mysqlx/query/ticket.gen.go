// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/tiny-sky/Tvote/core/dao/entity"
)

func newTicket(db *gorm.DB, opts ...gen.DOOption) ticket {
	_ticket := ticket{}

	_ticket.ticketDo.UseDB(db, opts...)
	_ticket.ticketDo.UseModel(&entity.Ticket{})

	tableName := _ticket.ticketDo.TableName()
	_ticket.ALL = field.NewAsterisk(tableName)
	_ticket.ID = field.NewInt(tableName, "id")
	_ticket.Ticket = field.NewString(tableName, "ticket")
	_ticket.CreatedAt = field.NewInt64(tableName, "created_at")
	_ticket.ExpiresAt = field.NewInt64(tableName, "expires_at")
	_ticket.MaxUsage = field.NewInt(tableName, "max_usage")
	_ticket.UsedCount = field.NewInt(tableName, "used_count")

	_ticket.fillFieldMap()

	return _ticket
}

type ticket struct {
	ticketDo ticketDo

	ALL       field.Asterisk
	ID        field.Int
	Ticket    field.String
	CreatedAt field.Int64
	ExpiresAt field.Int64
	MaxUsage  field.Int
	UsedCount field.Int

	fieldMap map[string]field.Expr
}

func (t ticket) Table(newTableName string) *ticket {
	t.ticketDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticket) As(alias string) *ticket {
	t.ticketDo.DO = *(t.ticketDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticket) updateTableName(table string) *ticket {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt(table, "id")
	t.Ticket = field.NewString(table, "ticket")
	t.CreatedAt = field.NewInt64(table, "created_at")
	t.ExpiresAt = field.NewInt64(table, "expires_at")
	t.MaxUsage = field.NewInt(table, "max_usage")
	t.UsedCount = field.NewInt(table, "used_count")

	t.fillFieldMap()

	return t
}

func (t *ticket) WithContext(ctx context.Context) *ticketDo { return t.ticketDo.WithContext(ctx) }

func (t ticket) TableName() string { return t.ticketDo.TableName() }

func (t ticket) Alias() string { return t.ticketDo.Alias() }

func (t ticket) Columns(cols ...field.Expr) gen.Columns { return t.ticketDo.Columns(cols...) }

func (t *ticket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticket) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["ticket"] = t.Ticket
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["expires_at"] = t.ExpiresAt
	t.fieldMap["max_usage"] = t.MaxUsage
	t.fieldMap["used_count"] = t.UsedCount
}

func (t ticket) clone(db *gorm.DB) ticket {
	t.ticketDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticket) replaceDB(db *gorm.DB) ticket {
	t.ticketDo.ReplaceDB(db)
	return t
}

type ticketDo struct{ gen.DO }

func (t ticketDo) Debug() *ticketDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketDo) WithContext(ctx context.Context) *ticketDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketDo) ReadDB() *ticketDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketDo) WriteDB() *ticketDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketDo) Session(config *gorm.Session) *ticketDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketDo) Clauses(conds ...clause.Expression) *ticketDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketDo) Returning(value interface{}, columns ...string) *ticketDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketDo) Not(conds ...gen.Condition) *ticketDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketDo) Or(conds ...gen.Condition) *ticketDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketDo) Select(conds ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketDo) Where(conds ...gen.Condition) *ticketDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketDo) Order(conds ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketDo) Distinct(cols ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketDo) Omit(cols ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketDo) Join(table schema.Tabler, on ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ticketDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketDo) RightJoin(table schema.Tabler, on ...field.Expr) *ticketDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketDo) Group(cols ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketDo) Having(conds ...gen.Condition) *ticketDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketDo) Limit(limit int) *ticketDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketDo) Offset(offset int) *ticketDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ticketDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketDo) Unscoped() *ticketDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketDo) Create(values ...*entity.Ticket) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketDo) CreateInBatches(values []*entity.Ticket, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketDo) Save(values ...*entity.Ticket) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketDo) First() (*entity.Ticket, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Ticket), nil
	}
}

func (t ticketDo) Take() (*entity.Ticket, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Ticket), nil
	}
}

func (t ticketDo) Last() (*entity.Ticket, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Ticket), nil
	}
}

func (t ticketDo) Find() ([]*entity.Ticket, error) {
	result, err := t.DO.Find()
	return result.([]*entity.Ticket), err
}

func (t ticketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Ticket, err error) {
	buf := make([]*entity.Ticket, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketDo) FindInBatches(result *[]*entity.Ticket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketDo) Attrs(attrs ...field.AssignExpr) *ticketDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketDo) Assign(attrs ...field.AssignExpr) *ticketDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketDo) Joins(fields ...field.RelationField) *ticketDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketDo) Preload(fields ...field.RelationField) *ticketDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketDo) FirstOrInit() (*entity.Ticket, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Ticket), nil
	}
}

func (t ticketDo) FirstOrCreate() (*entity.Ticket, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Ticket), nil
	}
}

func (t ticketDo) FindByPage(offset int, limit int) (result []*entity.Ticket, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketDo) Delete(models ...*entity.Ticket) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketDo) withDO(do gen.Dao) *ticketDo {
	t.DO = *do.(*gen.DO)
	return t
}
